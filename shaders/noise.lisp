(in-package :raylisp)

(defclass noise-shader (shader)
  ((start :initarg :start :reader start-of)
   (end :initarg :end :reader end-of)
   (scale :initarg :scale :reader scale-of)))

(defmethod compute-shader-function ((shader noise-shader) object scene transform)
  (let ((start (compile-shader (start-of shader) object scene transform))
        (end (compile-shader (end-of shader) object scene transform))
        (scale (/ 1.0 (scale-of shader))))
    (declare (optimize speed))
    (lambda (point normal n.d ray counters)
      (let* ((v (vec* point scale))
             (noise (vector-noise v))
             (start-color (funcall start point normal n.d ray counters))
             (end-color (funcall end point normal n.d ray counters)))
        (declare (dynamic-extent v))
        (%vec-lerp v start-color end-color (clamp noise 0.0 1.0))))))
