(in-package :raylisp)

(defclass panoramic-camera (camera)
  ((angle :initform +pi+
          :initarg :angle
          :reader angle-of)))

(defmethod normalize-camera ((camera panoramic-camera) width height)
  (let ((angle (angle-of camera))
        (new (call-next-method)))
    (setf (slot-value new 'angle) angle)
    new))

(defmethod compute-camera-function ((camera panoramic-camera))
  (let ((dir (normalize (direction-of camera)))
	(right (right-of camera))
	(up (up-of camera))
	(location (location-of camera))
        (angle/2 (/ (angle-of camera) 2.0)))
    (declare (type vec dir right up location)
             (single-float angle/2))
    (lambda (fun rx ry counters)
      (declare (float rx ry)
               (function fun)
               (optimize speed))
      (note-camera-ray counters)
      (let* ((theta (* rx angle/2))
             (a (cos theta))
             (b (sin theta)))
        (macrolet ((dim (n)
                     `(+ (* a (aref dir ,n))
                         (* b (aref right ,n)) (* ry (aref up ,n)))))
          (let ((dir (normalize (vec (dim 0) (dim 1) (dim 2)))))
            (declare (dynamic-extent dir))
            (with-ray (ray :origin location :direction dir)
              (funcall fun ray))))))))
